//
// Generated file, do not edit! Created by opp_msgtool 6.0 from messages.msg.
//

#ifndef __MESSAGES_M_H
#define __MESSAGES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Request;
class Response;
/**
 * Enum generated from <tt>messages.msg:1</tt> by opp_msgtool.
 * <pre>
 * enum ResponseCode
 * {
 *     OK = 0;
 *     ERROR = 1;
 * }
 * </pre>
 */
enum ResponseCode {
    OK = 0,
    ERROR = 1
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ResponseCode& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ResponseCode& e) { int n; b->unpack(n); e = static_cast<ResponseCode>(n); }

/**
 * Class generated from <tt>messages.msg:7</tt> by opp_msgtool.
 * <pre>
 * // Define the Request message
 * message Request
 * {
 *     string hostname; // The hostname being requested
 * }
 * </pre>
 */
class Request : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string hostname;

  private:
    void copy(const Request& other);

  protected:
    bool operator==(const Request&) = delete;

  public:
    Request(const char *name=nullptr, short kind=0);
    Request(const Request& other);
    virtual ~Request();
    Request& operator=(const Request& other);
    virtual Request *dup() const override {return new Request(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getHostname() const;
    virtual void setHostname(const char * hostname);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Request& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Request& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>messages.msg:12</tt> by opp_msgtool.
 * <pre>
 * // Define the Response message
 * message Response
 * {
 *     short address[4];         // IPv4 address (4 bytes)
 *     ResponseCode statusCode; // Status code: OK or ERROR
 * }
 * </pre>
 */
class Response : public ::omnetpp::cMessage
{
  protected:
    short address[4] = {0};
    ResponseCode statusCode = static_cast<ResponseCode>(-1);

  private:
    void copy(const Response& other);

  protected:
    bool operator==(const Response&) = delete;

  public:
    Response(const char *name=nullptr, short kind=0);
    Response(const Response& other);
    virtual ~Response();
    Response& operator=(const Response& other);
    virtual Response *dup() const override {return new Response(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual size_t getAddressArraySize() const;
    virtual short getAddress(size_t k) const;
    virtual void setAddress(size_t k, short address);

    virtual ResponseCode getStatusCode() const;
    virtual void setStatusCode(ResponseCode statusCode);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Response& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Response& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline Request *fromAnyPtr(any_ptr ptr) { return check_and_cast<Request*>(ptr.get<cObject>()); }
template<> inline Response *fromAnyPtr(any_ptr ptr) { return check_and_cast<Response*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MESSAGES_M_H

