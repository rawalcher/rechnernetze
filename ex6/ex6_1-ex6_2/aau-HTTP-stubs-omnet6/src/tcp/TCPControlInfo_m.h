//
// Generated file, do not edit! Created by opp_msgtool 6.1 from tcp/TCPControlInfo.msg.
//

#ifndef __TCPCONTROLINFO_M_H
#define __TCPCONTROLINFO_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class TCPControlInfo;
// cplusplus {{
#include "../3rdParty/IPv4Address.h"
#include "../3rdParty/IPv6Address.h"
// }}

/**
 * Class generated from <tt>tcp/TCPControlInfo.msg:35</tt> by opp_msgtool.
 * <pre>
 * message TCPControlInfo
 * {
 *     inet::IPv4Address srcIPv4;	// source IPv4 address
 *     inet::IPv6Address srcIPv6;	// source IPv6 address
 *     int srcPort;					// source port
 * 
 *     inet::IPv4Address destIPv4;	// destination IPv4 address
 *     inet::IPv6Address destIPv6;	// destination IPv6 address
 *     int destPort;				// destination port
 * 
 *     // you may use the following commands for the actual connection management between HTTP and TCP
 *     int tcpCommand = 0;		// 0 ... do nothing, 1 ... open connection, 2 ... close connection
 *     int tcpStatus = 0;		// 1 ... connection is open, 2 ... connection is closed
 * }
 * </pre>
 */
class TCPControlInfo : public ::omnetpp::cMessage
{
  protected:
    inet::IPv4Address srcIPv4;
    inet::IPv6Address srcIPv6;
    int srcPort = 0;
    inet::IPv4Address destIPv4;
    inet::IPv6Address destIPv6;
    int destPort = 0;
    int tcpCommand = 0;
    int tcpStatus = 0;

  private:
    void copy(const TCPControlInfo& other);

  protected:
    bool operator==(const TCPControlInfo&) = delete;

  public:
    TCPControlInfo(const char *name=nullptr, short kind=0);
    TCPControlInfo(const TCPControlInfo& other);
    virtual ~TCPControlInfo();
    TCPControlInfo& operator=(const TCPControlInfo& other);
    virtual TCPControlInfo *dup() const override {return new TCPControlInfo(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const inet::IPv4Address& getSrcIPv4() const;
    virtual inet::IPv4Address& getSrcIPv4ForUpdate() { return const_cast<inet::IPv4Address&>(const_cast<TCPControlInfo*>(this)->getSrcIPv4());}
    virtual void setSrcIPv4(const inet::IPv4Address& srcIPv4);

    virtual const inet::IPv6Address& getSrcIPv6() const;
    virtual inet::IPv6Address& getSrcIPv6ForUpdate() { return const_cast<inet::IPv6Address&>(const_cast<TCPControlInfo*>(this)->getSrcIPv6());}
    virtual void setSrcIPv6(const inet::IPv6Address& srcIPv6);

    virtual int getSrcPort() const;
    virtual void setSrcPort(int srcPort);

    virtual const inet::IPv4Address& getDestIPv4() const;
    virtual inet::IPv4Address& getDestIPv4ForUpdate() { return const_cast<inet::IPv4Address&>(const_cast<TCPControlInfo*>(this)->getDestIPv4());}
    virtual void setDestIPv4(const inet::IPv4Address& destIPv4);

    virtual const inet::IPv6Address& getDestIPv6() const;
    virtual inet::IPv6Address& getDestIPv6ForUpdate() { return const_cast<inet::IPv6Address&>(const_cast<TCPControlInfo*>(this)->getDestIPv6());}
    virtual void setDestIPv6(const inet::IPv6Address& destIPv6);

    virtual int getDestPort() const;
    virtual void setDestPort(int destPort);

    virtual int getTcpCommand() const;
    virtual void setTcpCommand(int tcpCommand);

    virtual int getTcpStatus() const;
    virtual void setTcpStatus(int tcpStatus);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TCPControlInfo& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TCPControlInfo& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

inline any_ptr toAnyPtr(const inet::IPv4Address *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline inet::IPv4Address *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::IPv4Address>(); }
inline any_ptr toAnyPtr(const inet::IPv6Address *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline inet::IPv6Address *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::IPv6Address>(); }
template<> inline TCPControlInfo *fromAnyPtr(any_ptr ptr) { return check_and_cast<TCPControlInfo*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __TCPCONTROLINFO_M_H

