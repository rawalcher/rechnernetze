//
// Generated file, do not edit! Created by opp_msgtool 6.1 from messages/controlInfoIP.msg.
//

#ifndef __CONTROLINFOIP_M_H
#define __CONTROLINFOIP_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class controlInfoIP;
// cplusplus {{
#include "../3rdParty/IPv4Address.h"
// }}

/**
 * Class generated from <tt>messages/controlInfoIP.msg:25</tt> by opp_msgtool.
 * <pre>
 * packet controlInfoIP
 * {
 *     inet::IPv4Address destIP;
 *     inet::IPv4Address srcIP;
 * }
 * </pre>
 */
class controlInfoIP : public ::omnetpp::cPacket
{
  protected:
    inet::IPv4Address destIP;
    inet::IPv4Address srcIP;

  private:
    void copy(const controlInfoIP& other);

  protected:
    bool operator==(const controlInfoIP&) = delete;

  public:
    controlInfoIP(const char *name=nullptr, short kind=0);
    controlInfoIP(const controlInfoIP& other);
    virtual ~controlInfoIP();
    controlInfoIP& operator=(const controlInfoIP& other);
    virtual controlInfoIP *dup() const override {return new controlInfoIP(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const inet::IPv4Address& getDestIP() const;
    virtual inet::IPv4Address& getDestIPForUpdate() { return const_cast<inet::IPv4Address&>(const_cast<controlInfoIP*>(this)->getDestIP());}
    virtual void setDestIP(const inet::IPv4Address& destIP);

    virtual const inet::IPv4Address& getSrcIP() const;
    virtual inet::IPv4Address& getSrcIPForUpdate() { return const_cast<inet::IPv4Address&>(const_cast<controlInfoIP*>(this)->getSrcIP());}
    virtual void setSrcIP(const inet::IPv4Address& srcIP);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const controlInfoIP& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, controlInfoIP& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

inline any_ptr toAnyPtr(const inet::IPv4Address *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline inet::IPv4Address *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::IPv4Address>(); }
template<> inline controlInfoIP *fromAnyPtr(any_ptr ptr) { return check_and_cast<controlInfoIP*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __CONTROLINFOIP_M_H

