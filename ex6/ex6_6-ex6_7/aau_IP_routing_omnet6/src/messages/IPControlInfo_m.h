//
// Generated file, do not edit! Created by opp_msgtool 6.1 from messages/IPControlInfo.msg.
//

#ifndef __IPCONTROLINFO_M_H
#define __IPCONTROLINFO_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class IPControlInfo;
// cplusplus {{
   #include "controlInfoIP_m.h" 
// }}

#include "controlInfoIP_m.h" // import controlInfoIP

/**
 * Enum generated from <tt>messages/IPControlInfo.msg:27</tt> by opp_msgtool.
 * <pre>
 * enum ProtocolTypes
 * {
 *     ip = 4;
 *     tcp = 6;
 *     udp = 17;
 * }
 * </pre>
 */
enum ProtocolTypes {
    ip = 4,
    tcp = 6,
    udp = 17
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ProtocolTypes& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ProtocolTypes& e) { int n; b->unpack(n); e = static_cast<ProtocolTypes>(n); }

/**
 * Class generated from <tt>messages/IPControlInfo.msg:35</tt> by opp_msgtool.
 * <pre>
 * packet IPControlInfo extends controlInfoIP
 * {
 *     short protocol;
 * }
 * </pre>
 */
class IPControlInfo : public ::controlInfoIP
{
  protected:
    short protocol = 0;

  private:
    void copy(const IPControlInfo& other);

  protected:
    bool operator==(const IPControlInfo&) = delete;

  public:
    IPControlInfo(const char *name=nullptr, short kind=0);
    IPControlInfo(const IPControlInfo& other);
    virtual ~IPControlInfo();
    IPControlInfo& operator=(const IPControlInfo& other);
    virtual IPControlInfo *dup() const override {return new IPControlInfo(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual short getProtocol() const;
    virtual void setProtocol(short protocol);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const IPControlInfo& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, IPControlInfo& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline IPControlInfo *fromAnyPtr(any_ptr ptr) { return check_and_cast<IPControlInfo*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __IPCONTROLINFO_M_H

