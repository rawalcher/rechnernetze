//
// Generated file, do not edit! Created by opp_msgtool 6.0 from tcp/TCPSegment.msg.
//

#ifndef __TCPSEGMENT_M_H
#define __TCPSEGMENT_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class TCPSegment;
/**
 * Class generated from <tt>tcp/TCPSegment.msg:21</tt> by opp_msgtool.
 * <pre>
 * packet TCPSegment
 * {
 *     int srcPort = -1;     // source port
 *     int destPort = -1;     // destination port 
 *     int seqNr = 0;		// sequence number 32 bit
 *     int ackNr = 0;		// acknowledgement number 32 bit
 *     bool ack = false;	// ACK flag indicating the ackNr is valid
 *     bool syn = false;	// SYN flag for connection establishment
 *     bool fin = false;	// FIN flag for connection release
 * 
 *     // not needed :)
 *     bool rst = false;	// RST flag for connection reset
 *     int headerLength = 0;	// 4 bit header length -> number of 32 bit words
 *     int receiveWindow = 0;	// 16 bit receive window
 *     bool psh = false;	// PSH flag for indicting immediate passing on of information
 *     bool urg = false;	// URG flag for indicating 'urgent' segments (by app layer)
 * 
 * }
 * </pre>
 */
class TCPSegment : public ::omnetpp::cPacket
{
  protected:
    int srcPort = -1;
    int destPort = -1;
    int seqNr = 0;
    int ackNr = 0;
    bool ack = false;
    bool syn = false;
    bool fin = false;
    bool rst = false;
    int headerLength = 0;
    int receiveWindow = 0;
    bool psh = false;
    bool urg = false;

  private:
    void copy(const TCPSegment& other);

  protected:
    bool operator==(const TCPSegment&) = delete;

  public:
    TCPSegment(const char *name=nullptr, short kind=0);
    TCPSegment(const TCPSegment& other);
    virtual ~TCPSegment();
    TCPSegment& operator=(const TCPSegment& other);
    virtual TCPSegment *dup() const override {return new TCPSegment(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSrcPort() const;
    virtual void setSrcPort(int srcPort);

    virtual int getDestPort() const;
    virtual void setDestPort(int destPort);

    virtual int getSeqNr() const;
    virtual void setSeqNr(int seqNr);

    virtual int getAckNr() const;
    virtual void setAckNr(int ackNr);

    virtual bool getAck() const;
    virtual void setAck(bool ack);

    virtual bool getSyn() const;
    virtual void setSyn(bool syn);

    virtual bool getFin() const;
    virtual void setFin(bool fin);

    virtual bool getRst() const;
    virtual void setRst(bool rst);

    virtual int getHeaderLength() const;
    virtual void setHeaderLength(int headerLength);

    virtual int getReceiveWindow() const;
    virtual void setReceiveWindow(int receiveWindow);

    virtual bool getPsh() const;
    virtual void setPsh(bool psh);

    virtual bool getUrg() const;
    virtual void setUrg(bool urg);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TCPSegment& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TCPSegment& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline TCPSegment *fromAnyPtr(any_ptr ptr) { return check_and_cast<TCPSegment*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __TCPSEGMENT_M_H

