//
// Generated file, do not edit! Created by opp_msgtool 6.0 from messages/AlohaControlInfo.msg.
//

#ifndef __ALOHACONTROLINFO_M_H
#define __ALOHACONTROLINFO_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class AlohaControlInfo;
// cplusplus {{
#include "../3rdParty/MACAddress.h"
// }}

/**
 * Class generated from <tt>messages/AlohaControlInfo.msg:31</tt> by opp_msgtool.
 * <pre>
 * packet AlohaControlInfo
 * {
 *     inet::MACAddress src;
 *     inet::MACAddress dest;
 * }
 * </pre>
 */
class AlohaControlInfo : public ::omnetpp::cPacket
{
  protected:
    inet::MACAddress src;
    inet::MACAddress dest;

  private:
    void copy(const AlohaControlInfo& other);

  protected:
    bool operator==(const AlohaControlInfo&) = delete;

  public:
    AlohaControlInfo(const char *name=nullptr, short kind=0);
    AlohaControlInfo(const AlohaControlInfo& other);
    virtual ~AlohaControlInfo();
    AlohaControlInfo& operator=(const AlohaControlInfo& other);
    virtual AlohaControlInfo *dup() const override {return new AlohaControlInfo(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const inet::MACAddress& getSrc() const;
    virtual inet::MACAddress& getSrcForUpdate() { return const_cast<inet::MACAddress&>(const_cast<AlohaControlInfo*>(this)->getSrc());}
    virtual void setSrc(const inet::MACAddress& src);

    virtual const inet::MACAddress& getDest() const;
    virtual inet::MACAddress& getDestForUpdate() { return const_cast<inet::MACAddress&>(const_cast<AlohaControlInfo*>(this)->getDest());}
    virtual void setDest(const inet::MACAddress& dest);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AlohaControlInfo& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AlohaControlInfo& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

inline any_ptr toAnyPtr(const inet::MACAddress *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline inet::MACAddress *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::MACAddress>(); }
template<> inline AlohaControlInfo *fromAnyPtr(any_ptr ptr) { return check_and_cast<AlohaControlInfo*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __ALOHACONTROLINFO_M_H

