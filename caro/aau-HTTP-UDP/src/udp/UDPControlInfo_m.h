//
// Generated file, do not edit! Created by opp_msgtool 6.1 from udp/UDPControlInfo.msg.
//

#ifndef __UDPCONTROLINFO_M_H
#define __UDPCONTROLINFO_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class UDPControlInfo;
// cplusplus {{
#include "../3rdParty/IPv4Address.h"
#include "../3rdParty/IPv6Address.h"
// }}

/**
 * Class generated from <tt>udp/UDPControlInfo.msg:36</tt> by opp_msgtool.
 * <pre>
 * message UDPControlInfo
 * {
 *     inet::IPv4Address srcIPv4;	// source IPv4 address
 *     inet::IPv6Address srcIPv6;	// source IPv6 address
 *     int srcPort;					// source port
 * 
 *     inet::IPv4Address destIPv4;	// destination IPv4 address
 *     inet::IPv6Address destIPv6;	// destination IPv6 address
 *     int destPort;				// destination port
 * }
 * </pre>
 */
class UDPControlInfo : public ::omnetpp::cMessage
{
  protected:
    inet::IPv4Address srcIPv4;
    inet::IPv6Address srcIPv6;
    int srcPort = 0;
    inet::IPv4Address destIPv4;
    inet::IPv6Address destIPv6;
    int destPort = 0;

  private:
    void copy(const UDPControlInfo& other);

  protected:
    bool operator==(const UDPControlInfo&) = delete;

  public:
    UDPControlInfo(const char *name=nullptr, short kind=0);
    UDPControlInfo(const UDPControlInfo& other);
    virtual ~UDPControlInfo();
    UDPControlInfo& operator=(const UDPControlInfo& other);
    virtual UDPControlInfo *dup() const override {return new UDPControlInfo(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const inet::IPv4Address& getSrcIPv4() const;
    virtual inet::IPv4Address& getSrcIPv4ForUpdate() { return const_cast<inet::IPv4Address&>(const_cast<UDPControlInfo*>(this)->getSrcIPv4());}
    virtual void setSrcIPv4(const inet::IPv4Address& srcIPv4);

    virtual const inet::IPv6Address& getSrcIPv6() const;
    virtual inet::IPv6Address& getSrcIPv6ForUpdate() { return const_cast<inet::IPv6Address&>(const_cast<UDPControlInfo*>(this)->getSrcIPv6());}
    virtual void setSrcIPv6(const inet::IPv6Address& srcIPv6);

    virtual int getSrcPort() const;
    virtual void setSrcPort(int srcPort);

    virtual const inet::IPv4Address& getDestIPv4() const;
    virtual inet::IPv4Address& getDestIPv4ForUpdate() { return const_cast<inet::IPv4Address&>(const_cast<UDPControlInfo*>(this)->getDestIPv4());}
    virtual void setDestIPv4(const inet::IPv4Address& destIPv4);

    virtual const inet::IPv6Address& getDestIPv6() const;
    virtual inet::IPv6Address& getDestIPv6ForUpdate() { return const_cast<inet::IPv6Address&>(const_cast<UDPControlInfo*>(this)->getDestIPv6());}
    virtual void setDestIPv6(const inet::IPv6Address& destIPv6);

    virtual int getDestPort() const;
    virtual void setDestPort(int destPort);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const UDPControlInfo& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, UDPControlInfo& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

inline any_ptr toAnyPtr(const inet::IPv4Address *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline inet::IPv4Address *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::IPv4Address>(); }
inline any_ptr toAnyPtr(const inet::IPv6Address *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline inet::IPv6Address *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::IPv6Address>(); }
template<> inline UDPControlInfo *fromAnyPtr(any_ptr ptr) { return check_and_cast<UDPControlInfo*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __UDPCONTROLINFO_M_H

